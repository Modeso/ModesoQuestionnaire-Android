apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 25
    buildToolsVersion "26.0.0"
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}
configurations {
    ktlint
}

dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])
    ktlint 'com.github.shyiko:ktlint:0.9.0'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:recyclerview-v7:25.3.1'
    testCompile 'junit:junit:4.12'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"


}
//finds all kotlin code style issues
task ktlint(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // prepend "--reporter=plain?group_by_file" arg to change the reporter
}


check.dependsOn ktlint
//Format all kotlin source code in the current directory
task ktlintFormat(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}
//Generates a named report file in xml format on the current working directory containing all found issues
task ktlintGenerateCheckstyleXML(type: Exec) {
    commandLine 'java', '-cp', configurations.ktlint.join(System.getProperty('path.separator')),
            'com.github.shyiko.ktlint.Main', '--reporter=checkstyle', 'src/**/*.kt'
    standardOutput = new FileOutputStream(new File(buildDir, "ktlint-checkstyle-report.xml"))
    ignoreExitValue = true
    doLast {
        standardOutput.close()
        if (execResult.exitValue != 0) {
            throw new GradleException("ktlint finished with non-zero exit value ${execResult.exitValue}")
        }
    }
}
